name: Deploy to Amplify

on:
  # push:
  #   branches:
  #     - develop   # deploy only when pushing to develop
  workflow_dispatch: # manual trigger

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ap-south-1

jobs:
  deploy:
    runs-on: [self-hosted, linux, qa]

    defaults:
      run:
        working-directory: family-helper # üëà adjust to your project root

    steps:
      # Step 1: Checkout repo
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials (OIDC)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # Step 5: Build React app
      - name: Build React app
        run: npm run build

      # Step 6: Trigger Amplify deployment with Git commit message
      - name: Start Amplify job
        id: amplify
        run: |
          COMMIT_MESSAGE="$(git log -1 --pretty=%B)"
          echo "Using commit message: $COMMIT_MESSAGE"

          JOB_ID=$(aws amplify start-job \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name ${{ secrets.AMPLIFY_BRANCH_NAME }} \
            --job-type RELEASE \
            --commit-id $GITHUB_SHA \
            --commit-message "$COMMIT_MESSAGE" \
            --query "jobSummary.jobId" \
            --output text)

          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV
          echo "Triggered Amplify job with ID: $JOB_ID"

      # Step 7: Wait for Amplify job to finish
      - name: Wait for Amplify Deployment
        run: |
          while true; do
            STATUS=$(aws amplify get-job \
              --app-id ${{ secrets.AMPLIFY_APP_ID }} \
              --branch-name ${{ secrets.AMPLIFY_BRANCH_NAME }} \
              --job-id $JOB_ID \
              --query "job.summary.status" \
              --output text)

            echo "Current status: $STATUS"

            if [ "$STATUS" == "SUCCEED" ]; then
              echo "‚úÖ Amplify deployment succeeded."
              break
            elif [ "$STATUS" == "FAILED" ]; then
              echo "‚ùå Amplify deployment failed."
              exit 1
            fi

            sleep 15
          done
