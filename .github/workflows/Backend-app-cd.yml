name: Backend CD Pipeline (EKS)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker Image Tag to deploy'
        required: true

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: ecommerce-backend

jobs:
  deploy-to-eks:
    runs-on: [self-hosted, linux, qa]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name ${{ secrets.AWS_SECRET_EKS_CLUSTER_NAME }}

      - name: Render Kubernetes manifest
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          FULL_IMAGE="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${{ github.event.inputs.image_tag }}"
          export FULL_IMAGE
          echo "Deploying Image: $FULL_IMAGE"
          envsubst '${FULL_IMAGE}' < app/backend-src/k8s/Deployment.yml > k8s-backend-deploy.yml

      - name: Deploy to EKS
        run: kubectl apply -f k8s-backend-deploy.yml

      - name: Wait for deployment rollout
        run: kubectl rollout status deployment ecommstorebackend --timeout=90s

      - name: Debug pod if rollout failed
        if: failure()
        run: |
          kubectl get pods
          kubectl describe pod $(kubectl get pods -l app=ecommbackend -o jsonpath="{.items[0].metadata.name}")
