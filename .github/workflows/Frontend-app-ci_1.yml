name: Frontend CI Pipeline-new

on:
  push:
    branches:
      - main
    paths:
      - 'app/frontend-src/**'
  workflow_dispatch:

jobs:
  frontend-ci:
    runs-on: [self-hosted, linux, qa]

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: ecommerce-frontend

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image tag variables
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          SAFE_REPO=$(echo "${GITHUB_REPOSITORY}" | tr '/' '-')
          IMAGE_TAG="${SAFE_REPO}-${SHORT_SHA}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY" >> $GITHUB_ENV

      - name: Clean node_modules and lock file
        working-directory: app/frontend-src
        run: |
          rm -rf node_modules package-lock.json

      - name: Install dependencies and run tests with coverage
        working-directory: app/frontend-src
        run: |
          npm install --save-dev jest@28.1.3 ts-jest@28.0.8 jest-preset-angular@11.1.2 jest-environment-jsdom@28.1.3 @types/jest@28.1.6 @angular-builders/jest@15.0.0
          npm run test -- --coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: app/frontend-src
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Optional: Enforce SonarCloud Quality Gate (uncomment if needed)
      # - name: Wait for Quality Gate result
      #   uses: SonarSource/sonarcloud-quality-gate-action@v1.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build Docker image
        working-directory: app/frontend-src
        run: |
          echo "Building image: $IMAGE_URI:$IMAGE_TAG"
          docker build -t $IMAGE_URI:$IMAGE_TAG -t $IMAGE_URI:latest .

      - name: Scan Docker image with Trivy (fail on HIGH/CRITICAL)
        run: |
          echo "Scanning image: $IMAGE_URI:$IMAGE_TAG"
          trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_URI:$IMAGE_TAG

      - name: Push Docker image to ECR
        run: |
          echo "Pushing image: $IMAGE_URI:$IMAGE_TAG"
          docker push $IMAGE_URI:$IMAGE_TAG
          docker push $IMAGE_URI:latest
