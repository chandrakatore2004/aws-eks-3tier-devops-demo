name: Frontend CD Pipeline (EKS)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (e.g. chandrakatore2004-aws-eks-3tier-devops-demo-abc1234)'
        required: true
  push:
    branches:
      - master
    paths:
      - 'app/frontend-src/k8s/**'

env:
  AWS_REGION: ap-south-1
  AWS_DEFAULT_REGION: ap-south-1
  ECR_REPOSITORY: ecommerce-frontend
  SONAR_PROJECT_KEY: chandrakatore2004_aws-eks-3tier-devops-demo
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}

jobs:
  deploy-to-eks:
    runs-on: [self-hosted, linux, qa]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region $AWS_REGION \
            --name ${{ secrets.AWS_SECRET_EKS_CLUSTER_NAME }}

      - name: Render Kubernetes manifest with correct image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          FULL_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          export FULL_IMAGE
          echo "Using image: $FULL_IMAGE"
          envsubst '${FULL_IMAGE}' < app/frontend-src/k8s/Deployment.yml > k8s-frontend-deploy.yml

      - name: Print rendered manifest (debug)
        run: cat k8s-frontend-deploy.yml

      - name: Deploy to EKS
        run: kubectl apply -f k8s-frontend-deploy.yml

      - name: Wait for deployment rollout
        run: kubectl rollout status deployment/ecommstorefrontend --timeout=90s

      - name: Debug pod if rollout failed
        if: failure()
        run: |
          kubectl get pods
          kubectl describe pod $(kubectl get pods -l app=ecommstore -o jsonpath="{.items[0].metadata.name}")
